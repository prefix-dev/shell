// grammar.pest

// Whitespace and comments
WHITESPACE = _{ " " | "\t" | ("\\" ~ WHITESPACE* ~ NEWLINE) }
COMMENT = _{ "#" ~ (!NEWLINE ~ ANY)* }

// Basic tokens
QUOTED_WORD = { DOUBLE_QUOTED | SINGLE_QUOTED }

UNQUOTED_PENDING_WORD = ${ 
    (TILDE_PREFIX ~ (!(OPERATOR | WHITESPACE | NEWLINE) ~ (
        EXIT_STATUS | 
        UNQUOTED_ESCAPE_CHAR | 
        SUB_COMMAND | 
        ("$" ~ "{" ~ VARIABLE ~ "}" | "$" ~ VARIABLE) | 
        UNQUOTED_CHAR | 
        QUOTED_WORD
    ))*)
    | 
    (!(OPERATOR | WHITESPACE | NEWLINE) ~ (
        EXIT_STATUS | 
        UNQUOTED_ESCAPE_CHAR | 
        SUB_COMMAND | 
        ("$" ~ "{" ~ VARIABLE ~ "}" | "$" ~ VARIABLE) | 
        UNQUOTED_CHAR | 
        QUOTED_WORD
    ))+
}

TILDE_PREFIX = ${
    "~" ~ (!(OPERATOR | WHITESPACE | NEWLINE | "/") ~ (
        (!("\"" | "'" | "$" | "\\" | "/") ~ ANY)
    ))*
}

ASSIGNMENT_TILDE_PREFIX = ${
    "~" ~ (!(OPERATOR | WHITESPACE | NEWLINE | "/" | ":") ~ 
        (!("\"" | "'" | "$" | "\\" | "/") ~ ANY)
    )*
}

FILE_NAME_PENDING_WORD = ${
    (TILDE_PREFIX ~ (!(WHITESPACE | OPERATOR | NEWLINE) ~ (
        UNQUOTED_ESCAPE_CHAR |
        ("$" ~ VARIABLE) |
        UNQUOTED_CHAR |
        QUOTED_WORD
    ))*)
    |
    (!(WHITESPACE | OPERATOR | NEWLINE) ~ (
        UNQUOTED_ESCAPE_CHAR |
        ("$" ~ VARIABLE) |
        UNQUOTED_CHAR |
        QUOTED_WORD
    ))+
}

QUOTED_PENDING_WORD = ${ (
    EXIT_STATUS | 
    QUOTED_ESCAPE_CHAR | 
    SUB_COMMAND | 
    ("$" ~ "{" ~ VARIABLE ~ "}" | "$" ~ VARIABLE) |
    QUOTED_CHAR
)* }

UNQUOTED_ESCAPE_CHAR = ${ ("\\" ~ "$" | "$" ~ !"(" ~  !"{" ~ !VARIABLE) | "\\" ~ (" " | "`" | "\"" | "(" | ")")* }
QUOTED_ESCAPE_CHAR = ${ "\\" ~ "$" | "$" ~ !"(" ~ !"{" ~ !VARIABLE | "\\" ~ ("`" | "\"" | "(" | ")" | "'")* }

UNQUOTED_CHAR = ${ ("\\" ~ " ") | !("]]" | "[[" | "(" | ")" | "<" | ">" | "|" | "&" | ";" | "\"" | "'" | "$") ~ ANY }
QUOTED_CHAR = ${ !"\"" ~ ANY }

VARIABLE = ${ (ASCII_ALPHANUMERIC | "_")+ }
SUB_COMMAND = { "$(" ~ complete_command ~ ")"}

DOUBLE_QUOTED = @{ "\"" ~ QUOTED_PENDING_WORD ~ "\"" }
SINGLE_QUOTED = @{ "'" ~ (!"'" ~ ANY)* ~ "'" }

NAME = ${ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")* }
ASSIGNMENT_WORD = ${ NAME ~ "=" ~ ASSIGNMENT_VALUE? }
ASSIGNMENT_VALUE = ${ 
    ASSIGNMENT_TILDE_PREFIX ~ 
    ((":" ~ ASSIGNMENT_TILDE_PREFIX) | (!":" ~ UNQUOTED_PENDING_WORD))* |
    UNQUOTED_PENDING_WORD
}
IO_NUMBER = @{ ASCII_DIGIT+ }

// Special tokens
AND_IF = { "&&" }
OR_IF = { "||" }
DSEMI = { ";;" }
LESS = { "<" }
GREAT = { ">" }
DLESS = { "<<" }
DGREAT = { ">>" }
LESSAND = { "<&" }
GREATAND = { ">&" }
LESSGREAT = { "<>" }
DLESSDASH = { "<<-" }
CLOBBER = { ">|" }
AMPERSAND = { "&" }
EXIT_STATUS = ${ "$?" }

// Operators
OPERATOR = _{
    AND_IF | OR_IF | DSEMI | DLESS | DGREAT | LESSAND | GREATAND | LESSGREAT | DLESSDASH | CLOBBER |
    "," |"(" | ")" | "{" | "}" | ";" | "&" | "|" | "<" | ">"
}

// Reserved words
If = _{ "if" }
Then = _{ "then" }
Else = { "else" }
Elif = { "elif" }
Fi = _{ "fi" }
Do = { "do" }
Done = { "done" }
Case = { "case" }
Esac = { "esac" }
While = { "while" }
Until = { "until" }
For = { "for" }
Lbrace = { "{" }
Rbrace = { "}" }
Bang = { "!" }
In = { "in" }
Stdout = ${ "|" ~ !"|" ~ !"&"}
StdoutStderr = { "|&" }

RESERVED_WORD = _{
    If | Then | Else | Elif | Fi | Do | Done |
    Case | Esac | While | Until | For |
    Lbrace | Rbrace | Bang | In |
    StdoutStderr | Stdout
}

// Main grammar rules
complete_command = { list? ~ (separator+ ~ list)* ~ separator? }
list = !{ and_or ~ (separator_op ~ and_or)* ~ separator_op? }
and_or = !{ (pipeline | ASSIGNMENT_WORD+) ~ ((AND_IF | OR_IF) ~ linebreak ~ and_or)? }
pipeline = !{ Bang? ~ pipe_sequence }
pipe_sequence = !{ command ~ ((StdoutStderr | Stdout) ~ linebreak ~ pipe_sequence)? }

command = !{
    compound_command ~ redirect_list? |
    simple_command |
    function_definition
}

compound_command = {
    brace_group |
    subshell |
    for_clause |
    case_clause |
    if_clause |
    while_clause |
    until_clause
}

subshell = !{ "(" ~ compound_list ~ ")" }
compound_list = !{ (newline_list? ~ term ~ separator?)+ }
term = !{ and_or ~ (separator ~ and_or)* }

for_clause = {
    For ~ name ~ linebreak ~
    (In ~ (brace_group | wordlist)? ~ sequential_sep)? ~
    do_group
}

case_clause = !{
    Case ~ UNQUOTED_PENDING_WORD ~ linebreak ~
    linebreak ~ In ~ linebreak ~
    (case_list | case_list_ns)? ~
    Esac
}

case_list = !{
    case_item+
}

case_list_ns = !{
    case_item_ns+
}

case_item = !{
    "("? ~ pattern ~ ")" ~ (compound_list | linebreak) ~ DSEMI ~ linebreak
}

case_item_ns = !{
    "("? ~ pattern ~ ")" ~ compound_list? ~ linebreak
}

pattern = !{
    (Esac | UNQUOTED_PENDING_WORD) ~ ("|" ~ UNQUOTED_PENDING_WORD)*
}

if_clause = !{
    If ~ conditional_expression ~
    linebreak ~ Then ~ linebreak ~ complete_command ~ linebreak ~
    else_part? ~ linebreak ~ Fi
}

else_part = !{
    Elif ~ conditional_expression ~ Then ~ complete_command ~ linebreak ~ else_part? |
    Else ~ linebreak ~ complete_command
}

conditional_expression = !{
    ("[[" ~ (unary_conditional_expression | binary_conditional_expression | UNQUOTED_PENDING_WORD) ~ "]]") |
    ("[" ~ (unary_conditional_expression | binary_conditional_expression | UNQUOTED_PENDING_WORD) ~ "]") | 
    ("test" ~ (unary_conditional_expression | binary_conditional_expression | UNQUOTED_PENDING_WORD))
}

unary_conditional_expression = !{
    file_conditional_op ~ FILE_NAME_PENDING_WORD |
    variable_conditional_op ~ VARIABLE | 
    string_conditional_op ~ UNQUOTED_PENDING_WORD
}

file_conditional_op = !{
    "-a" | "-b" | "-c" | "-d" | "-e" | "-f" | "-g" | "-h" | "-k" | 
    "-p" | "-r" | "-s" | "-u" | "-w" | "-x" | "-G" | "-L" | 
    "-N" | "-O" | "-S"
}

variable_conditional_op = !{
    "-v" | "-R"
}

string_conditional_op = !{
    "-n" | "-z"
}

binary_conditional_expression = !{
    UNQUOTED_PENDING_WORD ~ (
        binary_string_conditional_op |
        binary_arithmetic_conditional_op
    ) ~ UNQUOTED_PENDING_WORD
}

binary_string_conditional_op = !{
    "==" | "=" | "!=" | "<" | ">"
}

binary_arithmetic_conditional_op = !{
    "-eq" | "-ne" | "-lt" | "-le" | "-gt" | "-ge"
}

while_clause = !{ While ~ compound_list ~ do_group }
until_clause = !{ Until ~ compound_list ~ do_group }

function_definition = !{ fname ~ "(" ~ ")" ~ linebreak ~ function_body }
function_body = !{ compound_command ~ redirect_list? }

fname = @{ RESERVED_WORD | NAME | ASSIGNMENT_WORD | UNQUOTED_PENDING_WORD }
name = @{ NAME } 

brace_group = !{ Lbrace ~ compound_list ~ Rbrace }
do_group = !{ Do ~ compound_list ~ Done }

simple_command = !{
    cmd_prefix ~ cmd_word ~ cmd_suffix? |
    (!cmd_prefix ~ cmd_name ~ cmd_suffix?)
}

cmd_prefix = !{ (io_redirect | ASSIGNMENT_WORD)+ }
cmd_suffix = !{ (io_redirect | UNQUOTED_PENDING_WORD)+ }
cmd_name = @{ !RESERVED_WORD ~ UNQUOTED_PENDING_WORD }
cmd_word = @{ (ASSIGNMENT_WORD | UNQUOTED_PENDING_WORD) }

redirect_list = !{ io_redirect+ }
io_redirect = !{ (IO_NUMBER | AMPERSAND)? ~ (io_file | io_here) }
io_file = !{ 
    LESS ~ filename | 
    GREAT ~ filename | 
    DGREAT ~ filename | 
    LESSAND ~ filename | 
    GREATAND ~ filename | 
    LESSGREAT ~ filename | 
    CLOBBER ~ filename
}
filename = _{ FILE_NAME_PENDING_WORD }
io_here = !{ (DLESS | DLESSDASH) ~ here_end }
here_end = @{ ("\"" ~ UNQUOTED_PENDING_WORD ~ "\"") | UNQUOTED_PENDING_WORD }

newline_list = _{ NEWLINE+ }
linebreak = _{ NEWLINE* }
separator_op = { "&" | ";" }
separator = _{ separator_op ~ linebreak | newline_list }
sequential_sep = !{ ";" ~ linebreak | newline_list }

wordlist = !{ UNQUOTED_PENDING_WORD+ }

// Entry point
FILE = { SOI ~ complete_command ~ EOI }